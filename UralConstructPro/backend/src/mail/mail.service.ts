import { Injectable } from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import * as path from 'path';
import * as nodemailer from 'nodemailer';
import { Application, ProductCategory } from '../applications/application.entity';
import { EmailValidationService } from './email-validation.service';
import { LoggerService } from '../utils/logger';

@Injectable()
export class MailService {
  private transporter: nodemailer.Transporter;

  constructor(
    private configService: ConfigService,
    private emailValidationService: EmailValidationService,
    private logger: LoggerService,
  ) {
    const port = this.configService.get<number>('SMTP_PORT', 587);
    this.transporter = nodemailer.createTransport({
      host: this.configService.get('SMTP_HOST', 'smtp.gmail.com'),
      port,
      secure: port === 465,
      auth: {
        user: this.configService.get('SMTP_USER'),
        pass: this.configService.get('SMTP_PASS'),
      },
    });
  }

  private getCategoryName(category: ProductCategory): string {
    const categoryNames = {
      [ProductCategory.BUILDING_FRAMES]: '–ö–∞—Ä–∫–∞—Å—ã –∑–¥–∞–Ω–∏–π',
      [ProductCategory.COLUMNS_BEAMS]: '–ö–æ–ª–æ–Ω–Ω—ã –∏ –±–∞–ª–∫–∏',
      [ProductCategory.PIPES]: '–¢—Ä—É–±—ã',
      [ProductCategory.PILES]: '–°–≤–∞–∏',
      [ProductCategory.ELBOWS]: '–û—Ç–≤–æ–¥—ã',
      [ProductCategory.OTHERS]: '–ü—Ä–æ—á–µ–µ (–ø—Ä–æ—á–∞—è –º–µ—Ç–∞–ª–ª–æ–ø—Ä–æ–¥—É–∫—Ü–∏—è)',
    };
    return categoryNames[category] || '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
  }

  async sendApplicationNotification(application: Application): Promise<void> {
    const categoryName = application.productCategory 
      ? this.getCategoryName(application.productCategory)
      : '–ù–µ —É–∫–∞–∑–∞–Ω–æ';

    const productInfo = application.productTitle 
      ? `<p><strong>–ò–∑–¥–µ–ª–∏–µ:</strong> ${application.productTitle}</p>`
      : '';

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Å–ø–∞–º-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤
    const sanitizedDescription = application.description
      ? application.description
          .replace(/https?:\/\/\S+/gi, '[—Å—Å—ã–ª–∫–∞]')
          .replace(/[^\w\s.,:;!()\-–∞-—è–ê-–Ø—ë–Å]/g, '')
          .slice(0, 800)
      : '';

    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; background: #ffffff;">
        <div style="background: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0;">
          <img src="cid:brand-logo" alt="–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä" style="width: 100%; height: auto; object-fit: contain;" />
          <p style="color: #1f2869; margin: 10px 0 0 0; font-size: 16px;">–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞</p>
        </div>
        
        <div style="padding: 30px; background: #ffffff;">
          <div style="background: #f7f9fa; padding: 25px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #748cab;">
            <h3 style="color: #2d3a4b; margin-top: 0; font-size: 18px;">–î–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞</h3>
            <p style="margin: 8px 0; color: #2d3a4b;"><strong>–ò–º—è:</strong> ${application.name}</p>
            <p style="margin: 8px 0; color: #2d3a4b;"><strong>Email:</strong> ${application.email}</p>
            <p style="margin: 8px 0; color: #2d3a4b;"><strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> ${application.phone}</p>
          </div>

          <div style="background: #f7f9fa; padding: 25px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #2d3a4b;">
            <h3 style="color: #2d3a4b; margin-top: 0; font-size: 18px;">–î–µ—Ç–∞–ª–∏ –∑–∞—è–≤–∫–∏</h3>
            <p style="margin: 8px 0; color: #2d3a4b;"><strong>–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∏–∑–¥–µ–ª–∏—è:</strong> ${categoryName}</p>
            ${productInfo}
            ${sanitizedDescription ? `<p style="margin: 8px 0; color: #2d3a4b; white-space: pre-line;"><strong>–û–ø–∏—Å–∞–Ω–∏–µ:</strong> ${sanitizedDescription}</p>` : ''}
          </div>

          <div style="background: #e8f4fd; padding: 20px; border-radius: 8px; margin: 20px 0; border: 1px solid #b8d4f0;">
            <h4 style="color: #2d3a4b; margin-top: 0;">–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–µ</h4>
            <p style="margin: 5px 0; color: #2d3a4b;">
              <strong>ID –∑–∞—è–≤–∫–∏:</strong> ${application.id}<br>
              <strong>–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:</strong> ${application.createdAt.toLocaleString('ru-RU')}
            </p>
          </div>
        </div>

        <div style="background: #f7f9fa; padding: 20px; text-align: center; border-radius: 0 0 8px 8px; border-top: 1px solid #e0e0e0;">
          <p style="color: #748cab; font-size: 14px; margin: 0;">
            –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ –£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä
          </p>
        </div>
      </div>
    `;

    const plainText = [
      '–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞ –£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä',
      '',
      `–ò–º—è: ${application.name}`,
      `Email: ${application.email}`,
      `–¢–µ–ª–µ—Ñ–æ–Ω: ${application.phone}`,
      `–ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryName}`,
      application.productTitle ? `–ò–∑–¥–µ–ª–∏–µ: ${application.productTitle}` : undefined,
      application.description ? `–û–ø–∏—Å–∞–Ω–∏–µ: ${application.description}` : undefined,
      '',
      `ID –∑–∞—è–≤–∫–∏: ${application.id}`,
      `–î–∞—Ç–∞: ${application.createdAt.toLocaleString('ru-RU')}`,
    ].filter(Boolean).join('\n');

    const logoPath = this.configService.get('LOGO_PATH') || path.resolve(process.cwd(), '../frontend/public/img/header/Company_logo.png');
    const mailOptions = {
      from: `–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä <${this.configService.get('SMTP_USER')}>`,
      to: this.configService.get('ADMIN_EMAIL', 'admin@uralconstruct.ru'),
      replyTo: application.email,
      subject: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: ${application.name} ‚Äî ${categoryName}`,
      text: plainText,
      html: htmlContent,
      attachments: [
        {
          filename: 'Company_logo.png',
          path: logoPath,
          cid: 'brand-logo',
        },
      ],
      headers: {
        'X-Priority': '3 (Normal)',
      },
    };

    try {
      await this.transporter.sendMail(mailOptions);
      this.logger.logEmail(mailOptions.to, mailOptions.subject, true);
      console.log(`‚úÖ Email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞—è–≤–∫–∏ ${application.id} –Ω–∞ ${mailOptions.to}`);
      console.log(`üìß –¢–µ–º–∞ –ø–∏—Å—å–º–∞: ${mailOptions.subject}`);
    } catch (error) {
      this.logger.logEmail(mailOptions.to, mailOptions.subject, false, error.message);
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
      console.error('üìß –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        to: mailOptions.to,
        subject: mailOptions.subject,
        error: error.message
      });
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    }
  }

  async sendClientConfirmation(application: Application): Promise<void> {
    const htmlContent = `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="text-align:center; margin-bottom: 10px;">
          <img src="cid:brand-logo" alt="–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä" style="width: 100%; height: auto; object-fit: contain;" />
        </div>
        <h2 style="color: #2d3a4b;">–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!</h2>
        
        <p>–£–≤–∞–∂–∞–µ–º—ã–π ${application.name},</p>
        
        <p>–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.</p>
        
        <div style="background: #f7f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
          <h3 style="color: #748cab; margin-top: 0;">–î–∞–Ω–Ω—ã–µ –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:</h3>
          <p><strong>–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏:</strong> ${application.id}</p>
          <p><strong>–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏:</strong> ${application.createdAt.toLocaleString('ru-RU')}</p>
        </div>

        <div style="background: #e8f4fd; padding: 15px; border-radius: 8px; margin: 20px 0;">
          <p style="margin: 0; color: #2d3a4b;">
            <strong>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</strong><br>
            –¢–µ–ª–µ—Ñ–æ–Ω: +7 (900) 123-45-67<br>
            Email: info@uralconstruct.ru
          </p>
        </div>

        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–ö–æ–º–∞–Ω–¥–∞ –£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä</p>
      </div>
    `;

    const confirmationText = [
      '–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –∑–∞—è–≤–∫—É!',
      '',
      `–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: ${application.id}`,
      `–î–∞—Ç–∞ –ø–æ–¥–∞—á–∏: ${application.createdAt.toLocaleString('ru-RU')}`,
      '',
      '–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞ –£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä'
    ].join('\n');

    const logoPath2 = this.configService.get('LOGO_PATH') || path.resolve(process.cwd(), '../frontend/public/img/header/Company_logo.png');
    const mailOptions = {
      from: `–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä <${this.configService.get('SMTP_USER')}>`,
      to: application.email,
      subject: '–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä ‚Äî –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞',
      text: confirmationText,
      html: htmlContent,
      attachments: [
        {
          filename: 'Company_logo.png',
          path: logoPath2,
          cid: 'brand-logo',
        },
      ],
    };

    try {
      await this.transporter.sendMail(mailOptions);
      this.logger.logEmail(application.email, '–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä ‚Äî –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞', true);
      console.log(`‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É ${application.email}`);
    } catch (error) {
      this.logger.logEmail(application.email, '–£—Ä–∞–ª–ê–Ω—Ç–∏–∫–æ—Ä ‚Äî –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞', false, error.message);
      console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É:', error);
    }
  }
} 